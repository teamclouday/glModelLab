CMAKE_MINIMUM_REQUIRED(VERSION 3.10.0)
PROJECT(ModelLab VERSION 1.0.0 LANGUAGES CXX)
SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -O2")

IF(WIN32)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mconsole")
ENDIF(WIN32)

ADD_COMPILE_DEFINITIONS(GLEW_STATIC)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
SET(MY_SRC_DIR "${CMAKE_SOURCE_DIR}/src")

# prepare the src files
IF(NOT EXISTS ${CMAKE_SOURCE_DIR}/externel/externel.zip)
EXECUTE_PROCESS(
    COMMAND git pull origin master
)
ENDIF()
IF(NOT EXISTS ${CMAKE_SOURCE_DIR}/externel/glew)
EXECUTE_PROCESS(
    COMMAND unzip ${CMAKE_SOURCE_DIR}/externel/externel.zip -d ${CMAKE_SOURCE_DIR}/externel
)
ENDIF()

IF(WIN32)
IF(NOT EXISTS ${CMAKE_SOURCE_DIR}/SDL2.dll)
EXECUTE_PROCESS(
    COMMAND cp ${CMAKE_SOURCE_DIR}/externel/SDL2/bin/SDL2.dll ${CMAKE_SOURCE_DIR}/SDL2.dll
)
ENDIF()
if(NOT EXISTS ${CMAKE_SOURCE_DIR}/libassimp.dll)
EXECUTE_PROCESS(
    COMMAND cp ${CMAKE_SOURCE_DIR}/externel/assimp/bin/libassimp.dll ${CMAKE_SOURCE_DIR}/libassimp.dll
)
ENDIF()
ENDIF(WIN32)

FILE(GLOB_RECURSE SRC_FILES "${MY_SRC_DIR}/*.cpp")
FILE(GLOB_RECURSE SRC_IMGUI "${CMAKE_SOURCE_DIR}/externel/imgui/src/*.cpp")

ADD_LIBRARY(IMGUI_LIBRARIES
    ${SRC_IMGUI} 
)

IF(WIN32)
INCLUDE_DIRECTORIES(
    "${CMAKE_SOURCE_DIR}/include"
    "${CMAKE_SOURCE_DIR}/externel/glew/include"
    "${CMAKE_SOURCE_DIR}/externel/glm/include"
    "${CMAKE_SOURCE_DIR}/externel/SDL2/include"
    "${CMAKE_SOURCE_DIR}/externel/imgui/include"
    "${CMAKE_SOURCE_DIR}/externel/assimp/include"
    "${CMAKE_SOURCE_DIR}/externel/SOIL/include"
)

LINK_DIRECTORIES(
    "${CMAKE_SOURCE_DIR}/externel/glew/lib"
    "${CMAKE_SOURCE_DIR}/externel/SDL2/lib"
    "${CMAKE_SOURCE_DIR}/externel/assimp/lib"
    "${CMAKE_SOURCE_DIR}/externel/SOIL/lib"
)
ENDIF(WIN32)

FIND_PACKAGE(OpenGL REQUIRED)

IF(UNIX)
INCLUDE_DIRECTORIES(
    "${CMAKE_SOURCE_DIR}/include"
    "${CMAKE_SOURCE_DIR}/externel/imgui/include"
)
# setup glew
FIND_PACKAGE(GLEW REQUIRED)
IF(GLEW_FOUND)
    INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIRS})
ELSE()
    MESSAGE(FATAL_ERROR "GLEW is not found on this machine")
ENDIF()
# setup SDL2
FIND_PATH(SDL2_INCLUDE_DIRS SDL.h PATH_SUFFIXES SDL2)
FIND_LIBRARY(SDL2_LIBRARIES SDL2)
IF(SDL2_INCLUDE_DIR_NOTFOUND)
    MESSAGE(FATAL_ERROR "SDL2 is not found on this machine")
ELSE()
    INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIRS})
ENDIF()
# setup assimp
FIND_PACKAGE(ASSIMP REQUIRED)
IF(ASSIMP_FOUND)
    INCLUDE_DIRECTORIES(${ASSIMP_INCLUDE_DIRS})
ELSE()
    MESSAGE(FATAL_ERROR "Assimp is not found on this machine")
ENDIF()
# setup soil
FIND_PATH(SOIL_INCLUDE_DIRS SOIL.h PATH_SUFFIXES SOIL)
FIND_LIBRARY(SOIL_LIBRARIES SOIL)
IF(SOIL_INCLUDE_DIRS_NOTFOUND)
    MESSAGE(FATAL_ERROR "SOIL is not found on this machine")
ELSE()
    INCLUDE_DIRECTORIES(${SOIL_INCLUDE_DIRS})
ENDIF()
ENDIF(UNIX)

ADD_EXECUTABLE(run ${SRC_FILES})

IF(WIN32)
TARGET_LINK_LIBRARIES(run
    mingw32
    SDL2main
    SDL2
    glew32s
    assimp
    SOIL
    IMGUI_LIBRARIES
    ${OPENGL_LIBRARIES}
)
ENDIF(WIN32)

IF(UNIX)
TARGET_LINK_LIBRARIES(run
    ${GLEW_LIBRARIES}
    ${SDL2_LIBRARIES}
    ${ASSIMP_LIBRARIES}
    ${SOIL_LIBRARIES}
    IMGUI_LIBRARIES
    ${OPENGL_LIBRARIES}
)
ENDIF(UNIX)
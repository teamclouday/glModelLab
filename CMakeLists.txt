CMAKE_MINIMUM_REQUIRED(VERSION 3.10.0)
PROJECT(ModelLab VERSION 1.0.0 LANGUAGES CXX)
SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -O2")

IF(WIN32)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mconsole")
ADD_DEFINITIONS(-DMY_ROOT_DIR="${CMAKE_SOURCE_DIR}")
ENDIF(WIN32)

ADD_DEFINITIONS(-DGLEW_STATIC)

IF(UNIX)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
ENDIF(UNIX)

IF(WIN32)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_SOURCE_DIR}/bin/Debug")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_SOURCE_DIR}/bin/Release")

IF(NOT EXISTS "${CMAKE_SOURCE_DIR}/bin")
FILE(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/bin")
ENDIF()

IF(NOT EXISTS "${CMAKE_SOURCE_DIR}/bin/Debug")
FILE(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/bin/Debug")
ENDIF()

IF(NOT EXISTS "${CMAKE_SOURCE_DIR}/bin/Release")
FILE(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/bin/Release")
ENDIF()

# prepare the src files
IF(NOT EXISTS ${CMAKE_SOURCE_DIR}/external/external.zip)
EXECUTE_PROCESS(
    COMMAND git pull origin master
)
ENDIF()

IF(NOT EXISTS ${CMAKE_SOURCE_DIR}/external/glew)
EXECUTE_PROCESS(
    COMMAND tar -xf ${CMAKE_SOURCE_DIR}/external/external.zip -C ${CMAKE_SOURCE_DIR}/external
)
ENDIF()

IF(NOT EXISTS "${CMAKE_SOURCE_DIR}/bin/Debug/SDL2.dll")
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/external/SDL2/bin/SDL2.dll ${CMAKE_SOURCE_DIR}/bin/Debug
)
ENDIF()

IF(NOT EXISTS "${CMAKE_SOURCE_DIR}/bin/Release/SDL2.dll")
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/external/SDL2/bin/SDL2.dll ${CMAKE_SOURCE_DIR}/bin/Release
)
ENDIF()

IF(NOT EXISTS "${CMAKE_SOURCE_DIR}/bin/Debug/assimp-vc140-mt.dll")
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/external/Assimp/bin/assimp-vc140-mt.dll ${CMAKE_SOURCE_DIR}/bin/Debug
)
ENDIF()

IF(NOT EXISTS "${CMAKE_SOURCE_DIR}/bin/Release/assimp-vc140-mt.dll")
EXECUTE_PROCESS(
    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/external/Assimp/bin/assimp-vc140-mt.dll ${CMAKE_SOURCE_DIR}/bin/Release
)
ENDIF()
ENDIF(WIN32)

FILE(GLOB_RECURSE SRC_FILES "${CMAKE_SOURCE_DIR}/src/*.cpp")
FILE(GLOB_RECURSE SRC_IMGUI "${CMAKE_SOURCE_DIR}/external/imgui/src/*.cpp")

ADD_LIBRARY(IMGUI_LIBRARIES
    ${SRC_IMGUI} 
)

IF(WIN32)
INCLUDE_DIRECTORIES(
    "${CMAKE_SOURCE_DIR}/include"
    "${CMAKE_SOURCE_DIR}/external/glew/include"
    "${CMAKE_SOURCE_DIR}/external/glm/include"
    "${CMAKE_SOURCE_DIR}/external/SDL2/include"
    "${CMAKE_SOURCE_DIR}/external/imgui/include"
    "${CMAKE_SOURCE_DIR}/external/Assimp/include"
    "${CMAKE_SOURCE_DIR}/external/SOIL/include"
)

LINK_DIRECTORIES(
    "${CMAKE_SOURCE_DIR}/external/glew/lib"
    "${CMAKE_SOURCE_DIR}/external/SDL2/lib"
    "${CMAKE_SOURCE_DIR}/external/Assimp/lib"
    "${CMAKE_SOURCE_DIR}/external/SOIL/lib"
)
ENDIF(WIN32)

IF(UNIX)
INCLUDE_DIRECTORIES(
    "${CMAKE_SOURCE_DIR}/include"
    "${CMAKE_SOURCE_DIR}/external/imgui/include"
)
# setup glew
FIND_PACKAGE(GLEW REQUIRED)
IF(GLEW_FOUND)
    INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIRS})
ELSE()
    MESSAGE(FATAL_ERROR "GLEW is not found on this machine")
ENDIF()
# setup SDL2
FIND_PATH(SDL2_INCLUDE_DIRS SDL.h PATH_SUFFIXES SDL2)
FIND_LIBRARY(SDL2_LIBRARIES SDL2)
IF(SDL2_INCLUDE_DIR_NOTFOUND)
    MESSAGE(FATAL_ERROR "SDL2 is not found on this machine")
ELSE()
    INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIRS})
ENDIF()
# setup assimp
FIND_PACKAGE(ASSIMP REQUIRED)
IF(ASSIMP_FOUND)
    INCLUDE_DIRECTORIES(${ASSIMP_INCLUDE_DIRS})
ELSE()
    MESSAGE(FATAL_ERROR "Assimp is not found on this machine")
ENDIF()
# setup soil
FIND_PATH(SOIL_INCLUDE_DIRS SOIL.h PATH_SUFFIXES SOIL)
FIND_LIBRARY(SOIL_LIBRARIES SOIL)
IF(SOIL_INCLUDE_DIRS_NOTFOUND)
    MESSAGE(FATAL_ERROR "SOIL is not found on this machine")
ELSE()
    INCLUDE_DIRECTORIES(${SOIL_INCLUDE_DIRS})
ENDIF()

SET(OpenGL_GL_PREFERENCE GLVND)

ENDIF(UNIX)

FIND_PACKAGE(OpenGL REQUIRED)

ADD_EXECUTABLE(run ${SRC_FILES})

IF(WIN32)
TARGET_LINK_LIBRARIES(run
    SDL2main
    SDL2
    glew32s
    assimp-vc140-mt
    SOIL
    IMGUI_LIBRARIES
    ${OPENGL_LIBRARIES}
)
ENDIF(WIN32)

IF(UNIX)
TARGET_LINK_LIBRARIES(run
    ${GLEW_LIBRARIES}
    ${SDL2_LIBRARIES}
    ${ASSIMP_LIBRARIES}
    ${SOIL_LIBRARIES}
    IMGUI_LIBRARIES
    ${OPENGL_LIBRARIES}
)
ENDIF(UNIX)